{{> includes/hero hero-title="Exam Result"}}
<div class="container__cstm">

  <h3>
    Exam Result
  </h3>

  <div id="exam">

    <form id="">
      {{#if exam.examBasic }}
      <div class="card py-3 px-5 mb-4">
        <h3 class="mb-3 exam-qns" style="color:#2073D4;">
          Blockchasin Basic Result
        </h3>
        <ul>
          <li style="display: flex;flex-direction:column">
            <strong><span>Attempts:</span></strong> {{{total}}}
            <strong><span>marks:</span></strong> {{{obtainedMarks}}}
            <strong><span>Percent:</span></strong> {{{percent}}} %
            <strong><span>Certificate Hash:</span></strong> {{{certificateHash}}}
            {{#if examStatus}}
            <strong><span>Exam Status:</span></strong> <span class="greenText"><strong>Pass</strong></span>

            <div>
              <button type="button" onclick="downloadImage()">Download</button><br>
              <img src="/img/gif/loading_block.gif" style="width:30px;height:30px;display:none" id="loading_download">
            </div>
            <div class="fb-share-button" data-href="https://blockdegree.org" data-layout="button_count"
              data-size="large"><a target="_blank"
                href="https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fblockdegree.org%2F&amp;src=sdkpreparse"
                class="fb-xfbml-parse-ignore">FB-Share</a></div>
            {{!-- Ideally we dont want to use a form for this, need to use asynchronous requests, something like what react does --}}
            <p id="social_wrap">
              Post on Socials:
            </p>
            {{else}}
            <strong><span>Exam Status:</span></strong> <span class="redText"><strong>Fail</strong></span>
            {{/if}}
          </li>
        </ul>

      </div>
      <input class="ITR" type="button" value="Retake Exam"
        onclick="window.location.href='https://blockdegree.org/blockchain-basic-exam'" />
      {{else if exam.examAdvanced}}
      <div class="card py-3 px-5 mb-4">
        <h3 class="mb-3 exam-qns" style="color:#2073D4;">
          Blockchain Advanced Result
        </h3>
        <ul>
          <li style="display: flex;flex-direction:column">
            <strong><span>Attempts:</span></strong> {{{total}}}
            <strong><span>marks:</span></strong> {{{obtainedMarks}}}
            <strong><span>Percent:</span></strong> {{{percent}}} %
            <strong><span>Certificate Hash:</span></strong> {{{certificateHash}}}
            {{#if examStatus}}
            <strong><span>Exam Status:</span></strong> <span class="greenText"><strong>Pass</strong></span>
            <div class="fb-share-button" data-href="https://blockdegree.org" data-layout="button_count"
              data-size="large"><a target="_blank"
                href="https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fblockdegree.org%2F&amp;src=sdkpreparse"
                class="fb-xfbml-parse-ignore">FB-Share</a></div>
            <div>
              <button type="button" onclick="downloadImage()">Download</button>
              <img src="/img/gif/loading_block.gif" style="width:30px;height:30px;display:none" id="loading_download"
                style="display:none">

            </div>
            {{!-- Ideally we dont want to use a form for this, need to use asynchronous requests, something like what react does --}}
            <p id="social_wrap">
              Post on Socials:
            </p>

            {{else}}
            <strong><span>Exam Status:</span></strong> <span class="redText"><strong>Fail</strong></span>
            {{/if}}
          </li>

        </ul>

      </div>
      <input class="ITR" type="button" value="Retake Exam"
        onclick="window.location.href='https://blockdegree.org/blockchain-advanced-exam'" />

      {{else if exam.examProfessional}}
      <div class="card py-3 px-5 mb-4">
        <h3 class="mb-3 exam-qns">
          Blockchasin Professional Result
        </h3>
        <ul>
          <li style="display: flex;flex-direction:column">
            <strong><span>Attempts:</span></strong> {{{total}}}
            <strong><span>marks:</span></strong> {{{obtainedMarks}}}
            <strong><span>Percent:</span></strong> {{{percent}}} %
            <strong><span>Certificate Hash:</span></strong> {{{certificateHash}}}
            {{#if examStatus}}
            <strong><span>Exam Status:</span></strong> <span class="greenText"><strong>Pass</strong></span>
            <div class="fb-share-button" data-href="https://blockdegree.org" data-layout="button_count"
              data-size="large"><a target="_blank"
                href="https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fblockdegree.org%2F&amp;src=sdkpreparse"
                class="fb-xfbml-parse-ignore">FB-Share</a></div>
            <div>
              <button type="button" onclick="downloadImage()">Download</button>
              <img src="/img/gif/loading_block.gif" style="width:30px;height:30px;display:none" id="loading_download"
                style="display:none">
            </div>
            {{!-- Ideally we dont want to use a form for this, need to use asynchronous requests, something like what react does --}}
            <p id="social_wrap">
              Post on Socials:
            </p>
            {{else}}
            <strong><span>Exam Status:</span></strong> <span class="redText"><strong>Fail</strong></span>
            {{/if}}
          </li>

        </ul>

      </div>
      <input class="ITR" type="button" value="Retake Exam"
        onclick="window.location.href='https://blockdegree.org/blockchain-professional-exam'" />

      {{/if}}
      {{!--<ul>
          <li>
            <span><strong>we can shortly send your certifiacte in your Maild ID</strong></span>
          </li>
        </ul>--}}
      {{!-- <div class="text-right">
        <input id="exam-submit" type="submit" class="btn btn-primary py-2 mt-4 text-white" value="Submit your answers">
      </div> --}}
    </form>
  </div>

</div>
<script src="/js/exam.js"></script>

<script>


  const msg = "Hey, I just got certified in blockchain from Blockdegree.org, check it out !!"

  window.onload = function () {
    checkAuth();
  }

  async function downloadImage() {
    console.log("inside download");
    document.getElementById("loading_download").style = "width:30px;height:30px;display:inline";
    var xhr = new XMLHttpRequest();
    xhr.open('POST', "/api/downloadCertificate", true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function () {
      if (this.status === 200) {
        var filename = "";
        var disposition = xhr.getResponseHeader('Content-Disposition');
        if (disposition && disposition.indexOf('attachment') !== -1) {
          var filenameRegex = /filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/;
          var matches = filenameRegex.exec(disposition);
          if (matches != null && matches[1]) filename = matches[1].replace(/['"]/g, '');
        }
        var type = xhr.getResponseHeader('Content-Type');

        var blob = typeof File === 'function'
          ? new File([this.response], filename, { type: type })
          : new Blob([this.response], { type: type });
        if (typeof window.navigator.msSaveBlob !== 'undefined') {
          // IE workaround for "HTML7007: One or more blob URLs were revoked by closing the blob for which they were created. These URLs will no longer resolve as the data backing the URL has been freed."
          window.navigator.msSaveBlob(blob, filename);
        } else {
          document.getElementById('loading_download').style = "display:none";
          var URL = window.URL || window.webkitURL;
          var downloadUrl = URL.createObjectURL(blob);

          if (filename) {
            // use HTML5 a[download] attribute to specify filename
            var a = document.createElement("a");
            // safari doesn't support this yet
            if (typeof a.download === 'undefined') {
              window.location = downloadUrl;
            } else {

              a.href = downloadUrl;
              a.download = filename;
              document.body.appendChild(a);
              a.click();
            }
          } else {
            window.location = downloadUrl;
          }
        }
      }
    };
    xhr.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
    xhr.send($.param({ hash: "{{ certificateHash }}" }));
  }

  function checkAuth() {
    console.log("called")
    $.ajax({
      url: "/api/getAuthStatus",
      method: "post",
      data: {},
      success: (result) => {
        // setting up a hidden html.
        // to be replaced by : pop-up modal for post, async call to /api/shareSocial and  
        let retHTML = '<form target="_blank" method="post" action="/api/shareOnTwitter">' +
          '                <input type="hidden" placeholder="Enter post status" name="msg" />' +
          '                <input type="hidden" />' +
          '              </form>'
        console.log(result)
        if (result.twitterAuth) {
          // signed in with twitter, show share button
          retHTML += '<button type="button" class="btn btn-info btn-lg" onclick="showImageModal()" data-toggle="modal" data-target="#postTwitter">Post Twitter</button>' +
            '' +
            '  <!-- Modal -->' +
            '  <div class="modal fade" id="postTwitter" role="dialog">' +
            '    <div class="modal-dialog">' +
            '    ' +
            '      <!-- Modal content-->' +
            '      <div class="modal-content">' +
            '        <div class="modal-header">' +
            '          <h4 class="modal-title">Twitter Post</h4>' +
            '          <button type="button" class="close" data-dismiss="modal">Ã—</button>' +
            '        </div>' +
            '<div><input type ="checkbox" id="certiLinkTwitter" >Include link to certificate<br></div> ' +
            '        <div class="modal-body">' +
            '          <p>' + '<textarea cols="30" rows="3" id="postMSGTwitter" >' + msg + '</textarea>' +
            '          <div>' +
            '<div><img src="/img/gif/loading_block.gif" style="width:400px;height:350px;" id="modalImage" ></div>' +
            '            <button type="button" onclick="postTweet()">Post On Twitter ' +
            '            </button>' +
            '          </div>' +
            '        </div>' +
            '' +
            '        <div class="modal-footer">' +
            '          <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>' +
            '        </div>' +
            '      </div>' +
            '      ' +
            '    </div>' +
            '  </div>';
        } else {
          retHTML += '<div>' +
            '<button type="button" onclick="handleAuthTwitter()">Auth-Twitter</button>' +
            '</div>';
        }
        if (result.linkedinAuth) {
          retHTML += '<button type="button" class="btn btn-info btn-lg" data-toggle="modal" data-target="#postLinkedin">Post Linkedin</button>' +
            '' +
            '  <!-- Modal -->' +
            '  <div class="modal fade" id="postLinkedin" role="dialog">' +
            '    <div class="modal-dialog">' +
            '    ' +
            '      <!-- Modal content-->' +
            '      <div class="modal-content">' +
            '        <div class="modal-header">' +
            '          <h4 class="modal-title">Linkedin Post</h4>' +
            '          <button type="button" class="close" data-dismiss="modal">Ã—</button>' +
            '        </div>' +
            '<div><input type ="checkbox" id="certiLinkLinkedin" >Include link to certificate<br></div> ' +
            '        <div class="modal-body">' +
            '          <p>' + '<textarea cols="30" rows="3" id="postMSGLinkedin" >' + msg + '</textarea>' +
            '          <div>' +
            '            <button type="button" onclick="postLinkedin()">Post On Linkedin ' +
            '            </button>' +
            '          </div>' +
            '        </div>' +
            '' +
            '        <div class="modal-footer">' +
            '          <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>' +
            '        </div>' +
            '      </div>' +
            '      ' +
            '    </div>' +
            '  </div>';
        }
        else {
          retHTML += '<div>' +
            '<button type="button" onclick="handleAuthLinkedin()">Auth-Linkedin</button>' +
            '</div>';
        }
        document.getElementById("social_wrap").innerHTML = retHTML;
      }
    })
  }

  function showImageModal() {
    console.log("inside download");
    var xhr = new XMLHttpRequest();
    xhr.open('POST', "/api/downloadCertificate", true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function () {
      if (this.status === 200) {
        var filename = "";
        var disposition = xhr.getResponseHeader('Content-Disposition');
        if (disposition && disposition.indexOf('attachment') !== -1) {
          var filenameRegex = /filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/;
          var matches = filenameRegex.exec(disposition);
          if (matches != null && matches[1]) filename = matches[1].replace(/['"]/g, '');
        }
        var type = xhr.getResponseHeader('Content-Type');

        var blob = typeof File === 'function'
          ? new File([this.response], filename, { type: type })
          : new Blob([this.response], { type: type });
        if (typeof window.navigator.msSaveBlob !== 'undefined') {
          // IE workaround for "HTML7007: One or more blob URLs were revoked by closing the blob for which they were created. These URLs will no longer resolve as the data backing the URL has been freed."
          window.navigator.msSaveBlob(blob, filename);
        } else {
          var URL = window.URL || window.webkitURL;
          document.querySelector("#modalImage").src = URL.createObjectURL(blob);
        }
      }
    };
    xhr.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
    xhr.send($.param({ hash: "{{ certificateHash }}" }));
  }

  function postTweet() {
    let userMSG = document.getElementById("postMSGTwitter").value;
    let certiLink = document.getElementById("certiLinkTwitter").checked;
    if (userMSG.length > 260) {
      alert("Max length is 260 ");
    }
    else {
      $.ajax({
        method: 'post',
        url: '/api/shareOnTwitter',
        data: { hash: "{{certificateHash}}", certiLink: certiLink, msg: userMSG },
        success: (result) => {
          console.log(result);
          if (result.uploaded) {
            alert("Posted on Twitter!");
          }
          else {
            alert("Oops, error occured while posting!")
          }
        }
      });
    }
    $('#postTwitter').modal('hide');
  }

  function postLinkedin() {
    let userMSG = document.getElementById("postMSGLinkedin").value;
    let certiLink = document.getElementById("certiLinkLinkedin").checked;
    $.ajax({
      method: 'post',
      url: '/api/shareOnLinkedin',
      data: { hash: "{{certificateHash}}", msg: userMSG, certiLink: certiLink },
      success: (result) => {
        console.log(result);
        if (result.uploaded) {
          alert("Posted on Linkedin!");
        }
        else {
          alert("Oops, error occured while posting!")
        }
      }
    });
    $('#postLinkedin').modal('hide');
  }

  function handleAuthTwitter() {
    let win = window.open("https://www.blockdegree.org/auth/twitter?close=true", 'newwin', 'height=600px,width=600px');
  }

  function handleAuthLinkedin() {
    var win = window.open("https://www.blockdegree.org/auth/linkedin?close=true", 'newwin', 'height=600px,width=600px');
  }
</script>